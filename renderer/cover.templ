package renderer

import (
	"fmt"
	"math"
)

script coverParam(p CoverResizeParams) {
	window.CoverParam = p;
}

templ CoverBlockTemplate(r *Renderer, p *CoverRenderParams) {
	@coverParam(p.ResizeParams)
	<div id={"block-" + p.Id } class="block blockCover">
		<div class="content">
			<div class="wrap">
				@p.CoverTemplate
			</div>
		</div>
	</div>
}

templ CoverImageTemplate(p *CoverRenderParams) {
	 <img id="cover" src={ p.Src } class={"cover", p.Classes} />
	 if p.UnsplashComponent != nil {
        @p.UnsplashComponent
     }
}

func getCoverStyle (p *CoverRenderParams) map[string]string {
	ret := map[string]string{}

	if p.Src != "" {
		ret["background-image"] = fmt.Sprintf(`url(%s)`, p.Src)
	}

    ret["background-position"] = fmt.Sprintf("%g", math.Abs(p.ResizeParams.CoverX*100)) + "% " + fmt.Sprintf("%g", math.Abs(p.ResizeParams.CoverY*100)) + "%"
    ret["background-size"] = fmt.Sprintf("%g", ((p.ResizeParams.CoverScale +  1) * 100)) + "%"
	return ret
}

templ CoverDefaultTemplate(p *CoverRenderParams) {
	<div 
		class={"cover", p.Classes}
		style={getCoverStyle(p)}
	>
	</div>
}

templ UnsplashReferral(author string, authorUrl templ.SafeURL) {
	<div class="author label">
		Photo by
		<a href={authorUrl} target="_blank">{author}</a> 
		on 
		<a href="https://unsplash.com/?utm_source=Anytype&amp;utm_medium=referral" target="_blank">Unsplash</a>
	</div>
}
